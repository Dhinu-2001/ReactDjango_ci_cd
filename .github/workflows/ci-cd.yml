name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  BACKEND_IMAGE_NAME: backend
  FRONTEND_IMAGE_NAME: frontend
  EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        cd backend/serverside
        pip install -r requirements.txt

    - name: Run Django tests
      run: |
        cd backend/serverside
        python manage.py test
      continue-on-error: true
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Run React tests
      run: |
        cd frontend
        npm test
      continue-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only build and push for the main branch
    steps:
    - uses: actions/checkout@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker images
      run: |
        docker build -t $DOCKER_HUB_USERNAME/$BACKEND_IMAGE_NAME:latest ./backend/serverside
        docker build -t $DOCKER_HUB_USERNAME/$FRONTEND_IMAGE_NAME:latest ./frontend
        docker push $DOCKER_HUB_USERNAME/$BACKEND_IMAGE_NAME:latest
        docker push $DOCKER_HUB_USERNAME/$FRONTEND_IMAGE_NAME:latest
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Replace placeholder IP in Nginx configs
      run: |
        sed -i 's/EC2_PUBLIC_IP/${{ secrets.EC2_PUBLIC_IP }}/g' nginx/nginx.conf
        sed -i 's/EC2_PUBLIC_IP/${{ secrets.EC2_PUBLIC_IP }}/g' frontend/nginx.conf

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST_NAME: ${{ secrets.EC2_PUBLIC_IP }}
        USER_NAME: ${{ secrets.EC2_USER_NAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -o StrictHostKeyChecking=no -i private_key nginx/nginx.conf ${USER_NAME}@${HOST_NAME}:~/nginx.conf
        scp -o StrictHostKeyChecking=no -i private_key frontend/nginx.conf ${USER_NAME}@${HOST_NAME}:~/frontend-nginx.conf
        scp -o StrictHostKeyChecking=no -i private_key docker-compose.yml ${USER_NAME}@${HOST_NAME}:~/docker-compose.yml
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} '
          mkdir -p ~/nginx ~/frontend
          mv ~/nginx.conf ~/nginx/nginx.conf
          mv ~/frontend-nginx.conf ~/frontend/nginx.conf
          sudo usermod -aG docker $USER
          newgrp docker
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          docker compose up -d
          docker system prune -af
        '